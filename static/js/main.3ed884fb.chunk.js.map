{"version":3,"sources":["sections/CovidTable/index.js","sections/CovidCard/index.js","sections/CovidChart/index.js","App.js","serviceWorker.js","index.js"],"names":["useFetch","url","useState","datas","setData","loading","setLoading","a","fetch","response","json","useEffect","fetchData","CovidTable","deaths","recovery","now","style","marginTop","tip","columns","title","dataIndex","key","defaultSortOrder","sorter","b","TotalConfirmed","TotalRecovered","TotalDeaths","dataSource","Countries","console","log","forEach","r","Country","val","CovidCard","className","gutter","align","textAlign","justify","span","color","fontSize","fontWeight","marginLeft","data","dataWorld","map","push","name","moment","Date","utc","format","Case","Cases","useFetchWorld","dataw","setDataw","loadingw","setLoadingw","jsonw","rw","fetchDataWorld","width","height","type","dataKey","stroke","Header","Layout","Content","Footer","App","backgroundColor","marginBottom","padding","CovidChart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ed884fb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Table, Spin } from \"antd\";\n\nconst apiUrl = \"https://api.covid19api.com/summary\";\n\nconst useFetch = url => {\n  const [datas, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return { loading, datas };\n};\n\nfunction CovidTable() {\n  const { loading, datas } = useFetch(apiUrl);\n  if (loading) {\n    return (\n      <center>\n        <Spin style={{ marginTop: \"100px\" }} tip=\"Loading Data...\"></Spin>\n      </center>\n    );\n  }\n  const columns = [\n    {\n      title: \"ชื่อประเทศ\",\n      dataIndex: \"Country\",\n      key: \"Country\"\n    },\n    {\n      title: \"ผู้ติดเชื่อ\",\n      dataIndex: \"TotalConfirmed\",\n      key: \"TotalConfirmed\",\n      defaultSortOrder: \"descend\",\n      sorter: (a, b) => a.TotalConfirmed - b.TotalConfirmed\n    },\n    {\n      title: \"หายแล้ว\",\n      dataIndex: \"TotalRecovered\",\n      key: \"TotalRecovered\",\n      defaultSortOrder: \"descend\",\n      sorter: (a, b) => a.TotalRecovered - b.TotalRecovered\n    },\n    {\n      title: \"เสียชีวิต\",\n      dataIndex: \"TotalDeaths\",\n      key: \"TotalDeaths\",\n      defaultSortOrder: \"descend\",\n      sorter: (a, b) => a.TotalDeaths - b.TotalDeaths\n    }\n  ];\n\n  return (\n    <div>\n      {loading ? (\n        <Table loading={loading}></Table>\n      ) : (\n        <Table columns={columns} dataSource={datas.Countries}></Table>\n      )}\n      <p>{console.log(datas)}</p>\n    </div>\n  );\n}\n\nexport default CovidTable;\n","import React, { useState, useEffect } from \"react\";\nimport { Col, Row, Spin } from \"antd\";\nimport \"./style.css\";\n\nlet deaths;\nlet recovery;\nlet now;\nconst apiUrl = \"https://api.covid19api.com/summary\";\n\nconst useFetch = url => {\n  const [datas] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    json.Countries.forEach(r => {\n      console.log(r.Country === \"Thailand\");\n      const val = json.Countries[204];\n      deaths = val.TotalDeaths;\n      recovery = val.TotalRecovered;\n      now = val.TotalConfirmed;\n    });\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  });\n\n  return { loading, datas };\n};\n\nfunction CovidCard() {\n  const { loading } = useFetch(apiUrl);\n  if (loading) {\n    return (\n      <center>\n        <Spin style={{ marginTop: \"100px\" }} tip=\"Loading Data...\"></Spin>\n      </center>\n    );\n  }\n  return (\n    <div className=\"site-card-wrapper\">\n      <Row\n        gutter={8}\n        align={\"middle\"}\n        style={{ textAlign: \"center\" }}\n        justify={\"center\"}\n      >\n        <Col span={8}>\n          <div className=\"card\">\n            <h4 style={{ color: \"#fff\", fontSize: \"24px\", fontWeight: 600 }}>\n              ผู้ติดเชื้อ\n            </h4>\n            <h1\n              style={{\n                color: \"#fff\",\n                fontSize: \"140px\",\n                fontWeight: 600,\n                marginTop: \"50px\"\n              }}\n            >\n              {now}\n            </h1>\n            <h2\n              style={{\n                color: \"#fff\",\n                marginTop: \"-30px\",\n                fontSize: \"36px\",\n                fontWeight: 600\n              }}\n            >\n              คน\n            </h2>\n          </div>\n        </Col>\n        <Col span={8} style={{ marginLeft: \"30px\" }}>\n          <Col span={16}>\n            <div className=\"card2\">\n              <h2\n                style={{\n                  color: \"#fff\",\n                  fontSize: \"24px\",\n                  fontWeight: 600\n                }}\n              >\n                {\" \"}\n                ผู้รักษาหาย\n              </h2>\n              <h1\n                style={{\n                  color: \"#fff\",\n                  fontSize: \"72px\",\n                  fontWeight: 600,\n                  marginTop: \"-10px\"\n                }}\n              >\n                {recovery} คน\n              </h1>\n            </div>\n          </Col>\n          <Col span={16} style={{ marginTop: \"10px\" }}>\n            <div className=\"card3\">\n              <h2\n                style={{\n                  color: \"#fff\",\n                  fontSize: \"24px\",\n                  fontWeight: 600\n                }}\n              >\n                {\" \"}\n                ผู้เสียชีวิต\n              </h2>\n              <h1\n                style={{\n                  color: \"#fff\",\n                  fontSize: \"72px\",\n                  fontWeight: 600,\n                  marginTop: \"-10px\"\n                }}\n              >\n                {deaths} คน\n              </h1>\n            </div>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default CovidCard;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  LineChart,\n  BarChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Bar,\n  Tooltip\n} from \"recharts\";\nimport { Spin, Row, Col } from \"antd\";\nimport moment from \"moment\";\n\nlet data = [];\nlet dataWorld = [];\n\nconst apiUrl =\n  \"https://api.covid19api.com/total/country/thailand/status/confirmed\";\nconst world = \"https://api.covid19api.com/summary\";\n\nconst useFetch = url => {\n  const [datas, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    json.map(r => {\n      data.push({\n        name: moment(r.Date)\n          .utc()\n          .format(\"DD/MM/YYYY\"),\n        Case: r.Cases\n      });\n    });\n    setData(json);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return { loading, datas };\n};\n\nconst useFetchWorld = url => {\n  const [dataw, setDataw] = useState(null);\n  const [loadingw, setLoadingw] = useState(true);\n\n  async function fetchDataWorld() {\n    const response = await fetch(url);\n    const jsonw = await response.json();\n    jsonw.Countries.map(rw => {\n      dataWorld.push({\n        name: rw.Country,\n        TotalConfirmed: rw.TotalConfirmed\n      });\n    });\n    setDataw(jsonw);\n    setLoadingw(false);\n  }\n\n  useEffect(() => {\n    fetchDataWorld();\n  }, []);\n\n  return { loadingw, dataw };\n};\n\nfunction CovidTable() {\n  const { loading, datas } = useFetch(apiUrl);\n  const { loadingw, dataw } = useFetchWorld(world);\n\n  if (loading || loadingw) {\n    return (\n      <center>\n        <Row justify={\"center\"}>\n          <Col span={12}>\n            <Spin tip=\"Loading chart . . . . \" />\n          </Col>\n          <Col span={12}>\n            <Spin tip=\"Loading chart . . . . \" />\n          </Col>\n        </Row>\n      </center>\n    );\n  }\n  return (\n    <div>\n      <Row justify={\"center\"}>\n        <Col span={12}>\n          <h2>ผู้ติดเชื้อในไทย</h2>\n          <LineChart width={600} height={300} data={data}>\n            <Line type=\"monotone\" dataKey=\"Case\" stroke=\"#f0dc26\" />\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n          </LineChart>\n        </Col>\n        <Col span={12}>\n          <h2>ผู้ติดเชื้อทั่วโลก</h2>\n          <BarChart width={600} height={300} data={dataWorld}>\n            <Bar type=\"monotone\" dataKey=\"TotalConfirmed\" stroke=\"#f0dc26\" />\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n          </BarChart>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default CovidTable;\n","import React, { useState, useEffect } from \"react\";\nimport \"./style/App.css\";\nimport moment from \"moment\";\nimport CovidTable from \"./sections/CovidTable/index\";\nimport CovidCard from \"./sections/CovidCard\";\nimport CovidChart from \"./sections/CovidChart\";\nimport { Layout } from \"antd\";\nconst { Header, Content, Footer } = Layout;\n\nexport default function App() {\n  return (\n    <div>\n      <Layout>\n        <Header style={{ height: \"600px\", backgroundColor: \"#353538\" }}>\n          <h1\n            style={{\n              fontSize: \"64px\",\n              fontWeight: 600,\n              color: \"#FF3A81\",\n              textAlign: \"center\",\n              marginTop: \"40px\",\n              marginBottom: \"-20px\"\n            }}\n          >\n            COVID-19 🇹🇭\n          </h1>\n          <h1\n            style={{\n              fontSize: \"64px\",\n              fontWeight: 600,\n              color: \"#fff\",\n              textAlign: \"center\",\n              marginTop: \"40px\"\n            }}\n          >\n            Thailand Realtime Data\n          </h1>\n          <CovidCard />\n        </Header>\n        <Content style={{ padding: \"0 50px\" }}>\n          <div className=\"site-layout-content\">\n            <h4 align=\"right\" style={{ color: \"#b92246\" }}>\n              Update at : {moment().format(\"LL\")}\n            </h4>\n            <h5 align=\"right\" style={{ color: \"green\" }}>\n              ( Data From covid19api and WHO )\n            </h5>\n            <CovidChart />\n            <CovidTable />\n          </div>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Covid-19 ©2020 Created by Thanawat Gulati\n        </Footer>\n      </Layout>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./style/index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}