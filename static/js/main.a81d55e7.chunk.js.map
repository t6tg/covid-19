{"version":3,"sources":["sections/Gender/index.js","sections/CovidTable/index.js","sections/CovidCard/index.js","sections/CovidChart/index.js","App.js","serviceWorker.js","index.js"],"names":["data","dataStat","useFetch","url","useState","loading","setLoading","a","fetch","response","json","ชาย","Gender","Male","หญิง","Female","ไม่ทราบ","Unknown","useEffect","fetchData","useFetchStat","loadingStat","setLoadingStat","responseStat","Data","map","r","push","วันที่","Date","ติดเชื้อเพิ่ม","NewConfirmed","รักษาหายเพิ่ม","NewRecovered","เสียชีวิตเพิ่ม","NewDeaths","กำลังรักษาเพิ่ม","NewHospitalized","fetchDataStat","CovidTable","justify","span","tip","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","type","stroke","datas","setData","deaths","recovery","now","newConfirm","style","marginTop","columns","title","dataIndex","key","defaultSortOrder","sorter","b","TotalConfirmed","TotalRecovered","TotalDeaths","dataSource","Countries","console","log","Deaths","Recovered","Confirmed","CovidCard","className","gutter","align","textAlign","color","fontSize","fontWeight","marginLeft","dataWorld","ติดเชื้อ","รักษาหายแล้ว","เสียชีวิต","กำลังรักษา","Hospitalized","useFetchWorld","dataw","setDataw","loadingw","setLoadingw","jsonw","rw","name","Country","fetchDataWorld","date","Header","Layout","Content","Footer","UpdateDate","App","backgroundColor","marginBottom","padding","CovidChart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a81d55e7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  LineChart,\n  Line\n} from \"recharts\";\nimport { Spin, Row, Col } from \"antd\";\n\nlet data = [];\nlet dataStat = [];\n\nconst apiUrl = \"https://covid19.th-stat.com/api/open/cases/sum\";\nconst stat = \"https://covid19.th-stat.com/api/open/timeline\";\n\nconst useFetch = url => {\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    data = [\n      {\n        ชาย: json.Gender.Male,\n        หญิง: json.Gender.Female,\n        ไม่ทราบ: json.Gender.Unknown\n      }\n    ];\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return { loading };\n};\n\nconst useFetchStat = url => {\n  const [loadingStat, setLoadingStat] = useState(true);\n\n  async function fetchDataStat() {\n    const responseStat = await fetch(url);\n    const jsonStat = await responseStat.json();\n    jsonStat.Data.map(r => {\n      dataStat.push({\n        วันที่: r.Date,\n        ติดเชื้อเพิ่ม: r.NewConfirmed,\n        รักษาหายเพิ่ม: r.NewRecovered,\n        เสียชีวิตเพิ่ม: r.NewDeaths,\n        กำลังรักษาเพิ่ม: r.NewHospitalized\n      });\n    });\n    setLoadingStat(false);\n  }\n\n  useEffect(() => {\n    fetchDataStat();\n  }, []);\n\n  return { loadingStat };\n};\n\nfunction CovidTable() {\n  const { loading } = useFetch(apiUrl);\n  const { loadingStat } = useFetchStat(stat);\n\n  if (loading || loadingStat) {\n    return (\n      <center>\n        <Row justify={\"center\"}>\n          <Col span={12}>\n            <Spin tip=\"Loading chart . . . . \" />\n          </Col>\n          <Col span={12}>\n            <Spin tip=\"Loading chart . . . . \" />\n          </Col>\n        </Row>\n      </center>\n    );\n  }\n  return (\n    <div>\n      <Row justify={\"center\"}>\n        <Col span={12}>\n          <h2>แยกผู้ติดเชื้อตามเพศ</h2>\n          <BarChart\n            width={500}\n            height={300}\n            data={data}\n            margin={{\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"ชาย\" fill=\"blue\" />\n            <Bar dataKey=\"หญิง\" fill=\"red\" />\n            <Bar dataKey=\"ไม่ทราบ\" fill=\"black\" />\n          </BarChart>\n        </Col>\n        <Col span={12}>\n          <h2>อัตราการเพิ่ม</h2>\n          <LineChart width={600} height={300} data={dataStat}>\n            <Line type=\"monotone\" dataKey=\"ติดเชื้อเพิ่ม\" stroke=\"#f0dc26\" />\n            <Line type=\"monotone\" dataKey=\"รักษาหายเพิ่ม\" stroke=\"green\" />\n            <Line type=\"monotone\" dataKey=\"เสียชีวิตเพิ่ม\" stroke=\"red\" />\n            <Line type=\"monotone\" dataKey=\"กำลังรักษาเพิ่ม\" stroke=\"blue\" />\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"วันที่\" />\n            <YAxis />\n            <Tooltip />\n          </LineChart>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default CovidTable;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Spin } from \"antd\";\n\nconst apiUrl = \"https://api.covid19api.com/summary\";\n\nconst useFetch = url => {\n  const [datas, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return { loading, datas };\n};\n\nfunction CovidTable() {\n  const { loading, datas } = useFetch(apiUrl);\n  if (loading) {\n    return (\n      <center>\n        <Spin style={{ marginTop: \"100px\" }} tip=\"Loading Data...\"></Spin>\n      </center>\n    );\n  }\n  const columns = [\n    {\n      title: \"ชื่อประเทศ\",\n      dataIndex: \"Country\",\n      key: \"Country\"\n    },\n    {\n      title: \"ผู้ติดเชื่อ\",\n      dataIndex: \"TotalConfirmed\",\n      key: \"TotalConfirmed\",\n      defaultSortOrder: \"descend\",\n      sorter: (a, b) => a.TotalConfirmed - b.TotalConfirmed\n    },\n    {\n      title: \"หายแล้ว\",\n      dataIndex: \"TotalRecovered\",\n      key: \"TotalRecovered\",\n      defaultSortOrder: \"descend\",\n      sorter: (a, b) => a.TotalRecovered - b.TotalRecovered\n    },\n    {\n      title: \"เสียชีวิต\",\n      dataIndex: \"TotalDeaths\",\n      key: \"TotalDeaths\",\n      defaultSortOrder: \"descend\",\n      sorter: (a, b) => a.TotalDeaths - b.TotalDeaths\n    }\n  ];\n\n  return (\n    <div>\n      {loading ? (\n        <Table loading={loading}></Table>\n      ) : (\n        <Table columns={columns} dataSource={datas.Countries}></Table>\n      )}\n      <p>{console.log(datas)}</p>\n    </div>\n  );\n}\n\nexport default CovidTable;\n","import React, { useState, useEffect } from \"react\";\nimport { Col, Row, Spin } from \"antd\";\nimport \"./style.css\";\n\nlet deaths;\nlet recovery;\nlet now;\nlet newConfirm;\nconst apiUrl = \"https://covid19.th-stat.com/api/open/today\";\n\nconst useFetch = url => {\n  const [datas] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    deaths = json.Deaths;\n    recovery = json.Recovered;\n    now = json.Confirmed;\n    newConfirm = json.NewConfirmed;\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  });\n\n  return { loading, datas };\n};\n\nfunction CovidCard() {\n  const { loading } = useFetch(apiUrl);\n  if (loading) {\n    return (\n      <center>\n        <Spin style={{ marginTop: \"100px\" }} tip=\"Loading Data...\"></Spin>\n      </center>\n    );\n  }\n  return (\n    <div className=\"site-card-wrapper\">\n      <Row\n        gutter={8}\n        align={\"middle\"}\n        style={{ textAlign: \"center\" }}\n        justify={\"center\"}\n      >\n        <Col span={8}>\n          <div className=\"card\">\n            <h4 style={{ color: \"#fff\", fontSize: \"24px\", fontWeight: 600 }}>\n              ผู้ติดเชื้อ\n            </h4>\n            <h1\n              style={{\n                color: \"#fff\",\n                fontSize: \"140px\",\n                fontWeight: 600,\n                marginTop: \"50px\"\n              }}\n            >\n              {now}{\" \"}\n            </h1>\n            <span style={{ fontSize: \"24px\", color: \"#fff\", marginTop: \"0px\" }}>\n              ( เพิ่มมา {newConfirm} คน )\n            </span>\n          </div>\n        </Col>\n        <Col span={8} style={{ marginLeft: \"30px\" }}>\n          <Col span={16}>\n            <div className=\"card2\">\n              <h2\n                style={{\n                  color: \"#fff\",\n                  fontSize: \"24px\",\n                  fontWeight: 600\n                }}\n              >\n                {\" \"}\n                ผู้รักษาหาย\n              </h2>\n              <h1\n                style={{\n                  color: \"#fff\",\n                  fontSize: \"72px\",\n                  fontWeight: 600,\n                  marginTop: \"-10px\"\n                }}\n              >\n                {recovery}\n                <span\n                  style={{ fontSize: \"18px\", color: \"#fff\", marginTop: \"0px\" }}\n                ></span>\n              </h1>\n            </div>\n          </Col>\n          <Col span={16} style={{ marginTop: \"10px\" }}>\n            <div className=\"card3\">\n              <h2\n                style={{\n                  color: \"#fff\",\n                  fontSize: \"24px\",\n                  fontWeight: 600\n                }}\n              >\n                {\" \"}\n                ผู้เสียชีวิต\n              </h2>\n              <h1\n                style={{\n                  color: \"#fff\",\n                  fontSize: \"72px\",\n                  fontWeight: 600,\n                  marginTop: \"-10px\"\n                }}\n              >\n                {deaths}\n              </h1>\n            </div>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default CovidCard;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  LineChart,\n  BarChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Bar,\n  Tooltip\n} from \"recharts\";\nimport { Spin, Row, Col } from \"antd\";\n\nlet data = [];\nlet dataWorld = [];\n\nconst apiUrl = \"https://covid19.th-stat.com/api/open/timeline\";\nconst world = \"https://api.covid19api.com/summary\";\n\nconst useFetch = url => {\n  const [datas, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    json.Data.map(r => {\n      data.push({\n        วันที่: r.Date,\n        ติดเชื้อ: r.Confirmed,\n        รักษาหายแล้ว: r.Recovered,\n        เสียชีวิต: r.Deaths,\n        กำลังรักษา: r.Hospitalized\n      });\n    });\n    setData(json);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return { loading, datas };\n};\n\nconst useFetchWorld = url => {\n  const [dataw, setDataw] = useState(null);\n  const [loadingw, setLoadingw] = useState(true);\n\n  async function fetchDataWorld() {\n    const response = await fetch(url);\n    const jsonw = await response.json();\n    jsonw.Countries.map(rw => {\n      dataWorld.push({\n        name: rw.Country,\n        TotalConfirmed: rw.TotalConfirmed\n      });\n    });\n    setDataw(jsonw);\n    setLoadingw(false);\n  }\n\n  useEffect(() => {\n    fetchDataWorld();\n  }, []);\n\n  return { loadingw, dataw };\n};\n\nfunction CovidTable() {\n  const { loading } = useFetch(apiUrl);\n  const { loadingw } = useFetchWorld(world);\n\n  if (loading || loadingw) {\n    return (\n      <center>\n        <Row justify={\"center\"}>\n          <Col span={12}>\n            <Spin tip=\"Loading chart . . . . \" />\n          </Col>\n          <Col span={12}>\n            <Spin tip=\"Loading chart . . . . \" />\n          </Col>\n        </Row>\n      </center>\n    );\n  }\n  return (\n    <div>\n      <Row justify={\"center\"}>\n        <Col span={12}>\n          <h2>ผู้ติดเชื้อในไทย</h2>\n          <LineChart width={600} height={300} data={data}>\n            <Line type=\"monotone\" dataKey=\"ติดเชื้อ\" stroke=\"#f0dc26\" />\n            <Line type=\"monotone\" dataKey=\"รักษาหายแล้ว\" stroke=\"green\" />\n            <Line type=\"monotone\" dataKey=\"เสียชีวิต\" stroke=\"red\" />\n            <Line type=\"monotone\" dataKey=\"กำลังรักษา\" stroke=\"blue\" />\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"วันที่\" />\n            <YAxis />\n            <Tooltip />\n          </LineChart>\n        </Col>\n        <Col span={12}>\n          <h2>ผู้ติดเชื้อทั่วโลก</h2>\n          <BarChart width={600} height={300} data={dataWorld}>\n            <Bar type=\"monotone\" dataKey=\"TotalConfirmed\" stroke=\"#f0dc26\" />\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n          </BarChart>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default CovidTable;\n","import React, { useState, useEffect } from \"react\";\nimport \"./style/App.css\";\nimport Gender from \"./sections/Gender\";\nimport CovidTable from \"./sections/CovidTable/index\";\nimport CovidCard from \"./sections/CovidCard\";\nimport CovidChart from \"./sections/CovidChart\";\nimport { Layout } from \"antd\";\nconst { Header, Content, Footer } = Layout;\n\nconst apiUrl = \"https://covid19.th-stat.com/api/open/today\";\nlet date;\nconst useFetch = url => {\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    date = json.UpdateDate;\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  });\n\n  return { loading };\n};\n\nexport default function App() {\n  useFetch(apiUrl);\n  return (\n    <div>\n      <Layout>\n        <Header style={{ height: \"600px\", backgroundColor: \"#353538\" }}>\n          <h1\n            style={{\n              fontSize: \"64px\",\n              fontWeight: 600,\n              color: \"#FF3A81\",\n              textAlign: \"center\",\n              marginTop: \"40px\",\n              marginBottom: \"-20px\"\n            }}\n          >\n            COVID-19 🇹🇭\n          </h1>\n          <h1\n            style={{\n              fontSize: \"64px\",\n              fontWeight: 600,\n              color: \"#fff\",\n              textAlign: \"center\",\n              marginTop: \"40px\"\n            }}\n          >\n            Thailand Realtime Data\n          </h1>\n          <CovidCard />\n        </Header>\n        <Content style={{ padding: \"0 50px\" }}>\n          <div className=\"site-layout-content\">\n            <h4 align=\"right\" style={{ color: \"#b92246\" }}>\n              Update at : {date}\n            </h4>\n            <h5 align=\"right\" style={{ color: \"green\" }}>\n              ( Data From covid19api and WHO และ กรมควบคุมโรค )\n            </h5>\n            <CovidChart />\n            <br />\n            <Gender />\n            <br />\n            <CovidTable />\n          </div>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Covid-19 ©2020 Created by Thanawat Gulati\n        </Footer>\n      </Layout>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./style/index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}