{"version":3,"sources":["sections/CovidTable/index.js","sections/CovidCard/index.js","App.js","serviceWorker.js","index.js"],"names":["useFetch","url","useState","datas","setData","loading","setLoading","a","fetch","response","json","useEffect","fetchData","CovidTable","thaicurrentConfirmedCount","thaidead","thaicuredCount","update","columns","title","dataIndex","key","sorter","b","confirmedCount","deadCount","curedCount","dataSource","results","onChange","pagination","filters","extra","console","log","map","datax","countryEnglishName","updateTime","CovidCard","className","Date","toLocaleDateString","gutter","span","style","backgroundColor","bordered","Header","Layout","Content","Footer","App","theme","mode","defaultSelectedKeys","Item","padding","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10221dae.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Table } from \"antd\";\n\nconst useFetch = url => {\n  const [datas, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return { loading, datas };\n};\n\nfunction CovidTable() {\n  const { loading, datas } = useFetch(\n    \"https://raw.githubusercontent.com/BlankerL/DXY-COVID-19-Data/master/json/DXYArea.json\"\n  );\n  const columns = [\n    {\n      title: \"ชื่อประเทศ\",\n      dataIndex: \"countryEnglishName\",\n      key: \"countryEnglishName\"\n    },\n    {\n      title: \"เมือง\",\n      dataIndex: \"provinceEnglishName\",\n      key: \"provinceEnglishName\"\n    },\n    {\n      title: \"จำนวนที่ยืนยันแล้ว\",\n      dataIndex: \"confirmedCount\",\n      key: \"confirmedCount\",\n      sorter: (a, b) => a.confirmedCount - b.confirmedCount\n    },\n    {\n      title: \"จำนวนผู้เสียชีวิต\",\n      key: \"deadCount\",\n      dataIndex: \"deadCount\",\n      sorter: (a, b) => a.deadCount - b.deadCount\n    },\n    {\n      title: \"จำนวนผู้รักษาหายแล้ว\",\n      key: \"curedCount\",\n      dataIndex: \"curedCount\",\n      sorter: (a, b) => a.curedCount - b.curedCount\n    }\n  ];\n  function onChange(pagination, filters, sorter, extra) {\n    console.log(\"params\", pagination, filters, sorter, extra);\n  }\n\n  return (\n    <div>\n      {loading ? (\n        <Table loading={loading}></Table>\n      ) : (\n        <Table\n          columns={columns}\n          dataSource={datas.results}\n          onChange={onChange}\n        ></Table>\n      )}\n    </div>\n  );\n}\n\nexport default CovidTable;\n","import React, { useState, useEffect } from \"react\";\nimport { Card, Col, Row } from \"antd\";\nimport \"./style.css\";\nlet thaicurrentConfirmedCount;\nlet thaidead;\nlet thaicuredCount;\nlet update;\nconst useFetch = url => {\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    json.results.map(datax => {\n      if (datax.countryEnglishName === \"Thailand\") {\n        thaicurrentConfirmedCount = datax.confirmedCount;\n        thaidead = datax.deadCount;\n        thaicuredCount = datax.curedCount;\n        update = datax.updateTime;\n      }\n    });\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return { loading };\n};\n\nfunction CovidCard() {\n  const { loading } = useFetch(\n    \"https://raw.githubusercontent.com/BlankerL/DXY-COVID-19-Data/master/json/DXYArea.json\"\n  );\n\n  return (\n    <div className=\"site-card-wrapper\">\n      <h1>Update at : {new Date(update).toLocaleDateString(\"en-US\")}</h1>\n      <Row gutter={16}>\n        <Col span={8}>\n          <Card\n            title=\"จำนวนผู้ติดเชื้อรวมในไทย\"\n            style={{ backgroundColor: \"#f0ad4e\" }}\n            loading={loading}\n            bordered={false}\n          >\n            <h1>{thaicurrentConfirmedCount} คน</h1>\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card\n            title=\"จำนวนผู้รักษาหายแล้วในไทย\"\n            style={{ backgroundColor: \"#5cb85c\" }}\n            loading={loading}\n            bordered={false}\n          >\n            <h1>{thaicuredCount} คน</h1>\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card\n            title=\"จำนวนผู้เสียชีวิตในไทย\"\n            style={{ backgroundColor: \"#d9534f\" }}\n            loading={loading}\n            bordered={false}\n          >\n            <h1>{thaidead} คน</h1>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default CovidCard;\n","import React from \"react\";\nimport \"./style/App.css\";\nimport CovidTable from \"./sections/CovidTable/index\";\nimport CovidCard from \"./sections/CovidCard\";\nimport { Menu, Layout } from \"antd\";\nconst { Header, Content, Footer } = Layout;\n\nexport default function App() {\n  return (\n    <div>\n      <Layout>\n        <Header>\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"2\"]}>\n            <Menu.Item key=\"1\">Covid Thailand By Thanawat Gulati</Menu.Item>\n          </Menu>\n        </Header>\n        <Content style={{ padding: \"0 50px\" }}>\n          <CovidCard />\n          <div className=\"site-layout-content\">\n            <CovidTable />\n          </div>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Ant Design ©2018 Created by Ant UED\n        </Footer>\n      </Layout>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./style/index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}